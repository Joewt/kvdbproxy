// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v3.21.12
// source: kvdb/v1/kvdb.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKvdbListDB = "/api.kvdb.v1.Kvdb/ListDB"
const OperationKvdbSearch = "/api.kvdb.v1.Kvdb/Search"
const OperationKvdbSearchPrefix = "/api.kvdb.v1.Kvdb/SearchPrefix"

type KvdbHTTPServer interface {
	// ListDB ListDB 列出所有的db
	ListDB(context.Context, *ListDBRequest) (*ListDBReply, error)
	// Search Search 查询key 对应的 value
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	// SearchPrefix SearchPrefix 列出某前缀所有的key value
	SearchPrefix(context.Context, *SearchPrefixRequest) (*SearchPrefixReply, error)
}

func RegisterKvdbHTTPServer(s *http.Server, srv KvdbHTTPServer) {
	r := s.Route("/")
	r.GET("/api/proxy/v1/list-db", _Kvdb_ListDB0_HTTP_Handler(srv))
	r.GET("/api/proxy/v1/search-prefix/{db}/{table}/{key_prefix}", _Kvdb_SearchPrefix0_HTTP_Handler(srv))
	r.GET("/api/proxy/v1/search/{db}/{table}/{key}", _Kvdb_Search0_HTTP_Handler(srv))
}

func _Kvdb_ListDB0_HTTP_Handler(srv KvdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDBRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKvdbListDB)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDB(ctx, req.(*ListDBRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDBReply)
		return ctx.Result(200, reply)
	}
}

func _Kvdb_SearchPrefix0_HTTP_Handler(srv KvdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchPrefixRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKvdbSearchPrefix)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchPrefix(ctx, req.(*SearchPrefixRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchPrefixReply)
		return ctx.Result(200, reply)
	}
}

func _Kvdb_Search0_HTTP_Handler(srv KvdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SearchRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKvdbSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Search(ctx, req.(*SearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SearchReply)
		return ctx.Result(200, reply)
	}
}

type KvdbHTTPClient interface {
	ListDB(ctx context.Context, req *ListDBRequest, opts ...http.CallOption) (rsp *ListDBReply, err error)
	Search(ctx context.Context, req *SearchRequest, opts ...http.CallOption) (rsp *SearchReply, err error)
	SearchPrefix(ctx context.Context, req *SearchPrefixRequest, opts ...http.CallOption) (rsp *SearchPrefixReply, err error)
}

type KvdbHTTPClientImpl struct {
	cc *http.Client
}

func NewKvdbHTTPClient(client *http.Client) KvdbHTTPClient {
	return &KvdbHTTPClientImpl{client}
}

func (c *KvdbHTTPClientImpl) ListDB(ctx context.Context, in *ListDBRequest, opts ...http.CallOption) (*ListDBReply, error) {
	var out ListDBReply
	pattern := "/api/proxy/v1/list-db"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKvdbListDB))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *KvdbHTTPClientImpl) Search(ctx context.Context, in *SearchRequest, opts ...http.CallOption) (*SearchReply, error) {
	var out SearchReply
	pattern := "/api/proxy/v1/search/{db}/{table}/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKvdbSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *KvdbHTTPClientImpl) SearchPrefix(ctx context.Context, in *SearchPrefixRequest, opts ...http.CallOption) (*SearchPrefixReply, error) {
	var out SearchPrefixReply
	pattern := "/api/proxy/v1/search-prefix/{db}/{table}/{key_prefix}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKvdbSearchPrefix))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
